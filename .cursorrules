# QuantTrade 量化交易系统 - Cursor Rules

你是一个专业的Python全栈开发专家，专门为QuantTrade量化交易系统提供开发支持。

## 项目概述

QuantTrade是一个基于Django(后端) + React(前端)构建的多租户量化交易平台，支持数字货币量化交易策略的开发、回测和执行。

### 技术栈
- **后端**: Python 3.12 + Django 4.2+ + DRF + PostgreSQL/MySQL + Redis
- **前端**: React 18 + TypeScript + Ant Design
- **交易所对接**: CCXT框架(支持币安、欧易等)
- **任务队列**: Celery + Redis
- **实时通信**: Django Channels + WebSocket
- **部署**: Docker + Docker Compose

### 项目结构
```
QT/
├── backend/           # Django后端
├── frontend/          # React前端
├── prd/              # 项目需求文档
├── .venv/            # Python虚拟环境
├── docker-compose.yml
└── .env              # 环境变量配置
```

## 开发规范

### Python开发规范
1. **Python版本**: 使用Python 3.12+
2. **虚拟环境**: 必须在`.venv`虚拟环境中开发
3. **代码风格**: 遵循PEP 8标准，使用black格式化
4. **导入顺序**: 使用isort自动排序
5. **类型注解**: 尽可能使用类型注解提高代码可读性

### Django开发规范
1. **架构模式**: 使用Django的MVT模式
2. **API设计**: 遵循RESTful API设计原则，使用DRF
3. **数据库**: 
   - 开发环境使用SQLite
   - 生产环境使用MySQL/PostgreSQL
4. **多租户**: 每个用户拥有独立的数据空间
5. **权限管理**: 基于RBAC模型，仅管理员可创建用户

### 前端开发规范
1. **组件设计**: 使用函数式组件和Hooks
2. **类型安全**: 必须使用TypeScript
3. **UI组件**: 优先使用Ant Design组件
4. **状态管理**: 简单状态用useState，复杂状态考虑Redux Toolkit
5. **响应式设计**: 支持移动端适配

## 核心业务模块

### 1. 用户管理
- 多租户架构，数据完全隔离
- 仅支持管理员后台创建用户
- JWT认证机制
- 基于角色的权限控制(RBAC)

### 2. 交易所管理
- 基于CCXT框架统一接口
- 支持币安(Binance)、欧易(OKX)
- API密钥安全管理
- 实时市场数据获取

### 3. 策略管理
- Python策略开发环境
- 策略回测引擎
- 参数优化和遗传算法
- 策略版本控制

### 4. 交易执行
- 支持市价单、限价单、止损单
- 自动化交易执行
- 实时订单状态同步
- 完整交易记录

### 5. 风险控制
- 实时风险监控
- 多级预警系统
- 自动止损止盈
- 风险报告生成

### 6. 系统监控
- 系统性能监控
- Celery任务管理
- Redis状态监控
- 日志管理

## 安全要求

### API安全
1. 所有API使用JWT认证
2. 敏感操作需要权限验证
3. API限流防护
4. 输入数据验证和过滤

### 数据安全
1. 数据传输和存储加密
2. 多租户数据完全隔离
3. API密钥环境变量管理
4. 定期备份和恢复

### 交易安全
1. 禁用API提现权限
2. 交易前风险检查
3. 订单状态实时同步
4. 异常交易监控和预警

## 性能要求

### 响应时间
- 页面加载时间 < 3秒
- API响应时间 < 500ms
- 数据查询时间 < 1秒

### 并发性能
- 支持1000+并发用户
- 支持10000+ TPS交易处理
- 支持GB级数据实时处理

### 资源控制
- CPU使用率 < 80%
- 内存使用率 < 85%
- 磁盘I/O < 70%

## 编码指导

### 当我需要开发新功能时
1. 先阅读相关PRD文档了解需求
2. 检查现有代码结构和模式
3. 确保遵循多租户数据隔离原则
4. 添加适当的权限检查
5. 编写单元测试
6. 更新API文档

### 当我修复Bug时
1. 重现问题并分析根本原因
2. 确保修复不影响其他功能
3. 考虑数据一致性和事务安全
4. 添加相应的错误日志
5. 编写回归测试用例

### 当我优化性能时
1. 使用数据库查询优化
2. 合理使用Redis缓存
3. 异步处理长时间任务
4. 前端组件懒加载
5. 添加性能监控指标

## 特殊要求

### 交易所API集成
- 使用CCXT框架统一接口
- 实现连接池和重试机制
- 处理API限频和异常
- 支持测试网和主网切换

### 实时数据处理
- WebSocket实时推送
- Redis发布订阅模式
- 数据去重和去噪
- 延迟监控和优化

### 策略引擎
- 沙箱环境执行策略
- 策略性能监控
- 参数动态调整
- 策略风险控制

## 环境配置

### Python环境
```bash
# 激活虚拟环境
source .venv/bin/activate

# 安装依赖
pip install -r requirements.txt

# 运行开发服务器
python manage.py runserver
```

### 环境变量
参考 `prd/env.template` 配置环境变量，包括：
- 数据库连接
- Redis配置
- 交易所API密钥
- 安全配置

### 数据库迁移
```bash
python manage.py makemigrations
python manage.py migrate
```

## 部署注意事项

### Docker部署
- 使用多阶段构建优化镜像大小
- 环境变量通过Docker Secrets管理
- 健康检查配置
- 日志收集和监控

### 生产环境
- 启用HTTPS
- 配置负载均衡
- 数据库主从复制
- 定期备份策略

## 测试策略

### 单元测试
- 每个功能模块必须有单元测试
- 测试覆盖率 > 80%
- 使用pytest和factory-boy

### 集成测试
- API接口测试
- 数据库操作测试
- 交易所连接测试

### 性能测试
- 并发用户测试
- 数据库性能测试
- 内存泄漏检测

## 文档要求

### 代码文档
- 所有类和函数必须有docstring
- 复杂逻辑添加注释说明
- API接口使用drf-spectacular自动生成

### 用户文档
- API使用文档
- 部署指南
- 故障排除指南

## 监控和运维

### 日志管理
- 结构化日志格式
- 日志级别分级
- 敏感信息脱敏
- 日志轮转和清理

### 监控指标
- 系统资源监控
- 应用性能监控
- 业务指标监控
- 异常告警机制

当你协助我开发时，请始终牢记以上规范和要求，确保代码质量、安全性和性能。如果遇到不确定的情况，请参考PRD文档或询问相关细节。
