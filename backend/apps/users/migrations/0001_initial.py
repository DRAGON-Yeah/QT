# Generated by Django 4.2.7 on 2025-08-30 08:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='手机号')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('is_tenant_admin', models.BooleanField(default=False, verbose_name='是否为租户管理员')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='最后登录IP')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='最后活动时间')),
                ('language', models.CharField(default='zh-hans', max_length=10, verbose_name='语言')),
                ('timezone_name', models.CharField(default='Asia/Shanghai', max_length=50, verbose_name='时区')),
                ('password_changed_at', models.DateTimeField(blank=True, null=True, verbose_name='密码修改时间')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='登录失败次数')),
                ('locked_until', models.DateTimeField(blank=True, null=True, verbose_name='锁定到')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users_user',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='会话键')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('device_info', models.JSONField(blank=True, default=dict, verbose_name='设备信息')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='最后活动')),
                ('expires_at', models.DateTimeField(verbose_name='过期时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户会话',
                'verbose_name_plural': '用户会话',
                'db_table': 'users_user_session',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='分配时间')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='过期时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL, verbose_name='分配者')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='角色')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户角色',
                'verbose_name_plural': '用户角色',
                'db_table': 'users_user_role',
                'ordering': ['-assigned_at'],
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('real_name', models.CharField(blank=True, max_length=50, verbose_name='真实姓名')),
                ('id_number', models.CharField(blank=True, max_length=20, verbose_name='身份证号')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='出生日期')),
                ('address', models.TextField(blank=True, verbose_name='地址')),
                ('emergency_contact', models.CharField(blank=True, max_length=50, verbose_name='紧急联系人')),
                ('emergency_phone', models.CharField(blank=True, max_length=20, verbose_name='紧急联系电话')),
                ('default_risk_level', models.CharField(choices=[('low', '低风险'), ('medium', '中风险'), ('high', '高风险')], default='medium', max_length=10, verbose_name='默认风险等级')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='邮件通知')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='短信通知')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='推送通知')),
                ('theme', models.CharField(choices=[('light', '浅色'), ('dark', '深色'), ('auto', '自动')], default='light', max_length=10, verbose_name='主题')),
                ('settings', models.JSONField(blank=True, default=dict, verbose_name='其他设置')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='core.tenant', verbose_name='租户')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '用户配置',
                'verbose_name_plural': '用户配置',
                'db_table': 'users_user_profile',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='users', through='users.UserRole', to='core.role', verbose_name='角色'),
        ),
        migrations.AddField(
            model_name='user',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.tenant', verbose_name='租户'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150, verbose_name='用户名')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP地址')),
                ('user_agent', models.TextField(verbose_name='用户代理')),
                ('result', models.CharField(choices=[('success', '成功'), ('failed', '失败'), ('blocked', '被阻止')], max_length=10, verbose_name='登录结果')),
                ('failure_reason', models.CharField(blank=True, max_length=100, verbose_name='失败原因')),
                ('attempted_at', models.DateTimeField(auto_now_add=True, verbose_name='尝试时间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
                'db_table': 'users_login_log',
                'ordering': ['-attempted_at'],
                'indexes': [models.Index(fields=['user', '-attempted_at'], name='users_login_user_id_8184c2_idx'), models.Index(fields=['ip_address', '-attempted_at'], name='users_login_ip_addr_8f8bad_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='user',
            unique_together={('tenant', 'username')},
        ),
    ]
